module Rblox
  class Interpreter
    @runner: Runner
    @globals: Environment
    @environment: Environment
    @locals: Hash[Expr::BaseExpr, Integer?]

    attr_reader globals: Environment

    def initialize: (Runner runner) -> void

    def interpret: (Array[Stmt::BaseStmt] statements) -> void
    def resolve: (Expr::BaseExpr expr, Integer depth) -> void
    def execute_block: (Array[Stmt::BaseStmt] statements, Environment environment) -> void

    def visit_block_stmt: (Stmt::BlockStmt stmt) -> void
    def visit_expression_stmt: (Stmt::ExpressionStmt stmt) -> void
    def visit_function_stmt: (Stmt::FunctionStmt stmt) -> void
    def visit_if_stmt: (Stmt::IfStmt stmt) -> void
    def visit_print_stmt: (Stmt::PrintStmt stmt) -> void
    def visit_println_stmt: (Stmt::PrintlnStmt stmt) -> void
    def visit_return_stmt: (Stmt::ReturnStmt stmt) -> void
    def visit_var_stmt: (Stmt::VarStmt stmt) -> void
    def visit_while_stmt: (Stmt::WhileStmt stmt) -> void

    def visit_assign_expr: (Expr::AssignExpr expr) -> untyped
    def visit_binary_expr: (Expr::BinaryExpr expr) -> untyped
    def visit_call_expr: (Expr::CallExpr expr) -> untyped
    def visit_grouping_expr: (Expr::GroupingExpr expr) -> untyped
    def visit_literal_expr: (Expr::LiteralExpr expr) -> untyped
    def visit_logical_expr: (Expr::LogicalExpr expr) -> untyped
    def visit_unary_expr: (Expr::UnaryExpr expr) -> untyped
    def visit_variable_expr: (Expr::VariableExpr expr) -> untyped

    private

    def evaluate: (Expr::BaseExpr expr) -> untyped
    def execute: (Stmt::BaseStmt | Array[Stmt::BaseStmt] stmt) -> void

    def look_up_variable: (Token name, Expr::BaseExpr expr) -> untyped

    def check_number_operand: (Token operator, untyped operand) -> void
    def check_number_operands: (Token operator, untyped left, untyped right) -> void

    def truthy?: (untyped object) -> bool

    def stringify: (untyped object) -> String
    def unescaped: (String string) -> String
  end
end
